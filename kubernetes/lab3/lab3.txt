1- How many static pods exist in this cluster in all namespaces?

kubectl get pods -A -o custom-columns=NAME:.metadata.name,CONTROLLER:.metadata.ownerReferences[].kind,NAMESPACE:.metadata.namespace | grep Node

2-On which nodes are the static pods created currently?

kubectl get pods -A -o custom-columns=NAME:.metadata.name,CONTROLLER:.metadata.ownerReferences[].kind,NODE_NAME:.spec.nodeName,NAMESPACE:.metadata.namespace | grep Node

only the minikube master node has static pods

3- What is the path of the directory holding the static pod definition files?

ssh into the node that you want to know its configuration
then run the following command:

cat /var/lib/kubelet/config.yaml | grep staticPodPath

4- Create a static pod named static-busybox that uses the busybox image and the command sleep 1000

add definition yaml file "static-busybox.yaml" to the following path "/etc/kubernetes/manifests" in the master node using ssh

5- Edit the image on the static pod to use busybox:1.28.4

edit definition yaml file "static-busybox.yaml" in the following path "/etc/kubernetes/manifests" in the master node using ssh

6- How many ConfigMaps exist in the environment?

one

kubectl get configmaps

7- Create a new ConfigMap  Use the spec given below.
       ConfigName Name: webapp-config-map
       Data: APP_COLOR=darkblue

kubectl create -f webapp_config_map.yaml

8- Create a  webapp-color POD with nginx image and use the created ConfigMap

kubectl create -f webapp_color_pod.yaml

9- How many Secrets exist on the system?

kubectl get secrets -A | wc -l
46

10- How many secrets are defined in the default-token secret?

kubectl get secrets | grep default-token
3

11- create a POD called db-pod with the image mysql:5.7 then check the POD status

kubectl create -f db_pod.yaml

12- why the db-pod status not ready

kubectl logs db-pod

it has the following error :

[ERROR] [Entrypoint]: Database is uninitialized and password option is not specified
    You need to specify one of the following:
    - MYSQL_ROOT_PASSWORD
    - MYSQL_ALLOW_EMPTY_PASSWORD
    - MYSQL_RANDOM_ROOT_PASSWORD


13- Create a new secret named db-secret with the data given below.
                    Secret Name: db-secret
    • Secret 1: MYSQL_DATABASE=sql01
    • Secret 2: MYSQL_USER=user1
    • Secret3: MYSQL_PASSWORD=password
    • Secret 4: MYSQL_ROOT_PASSWORD=password123

kubectl create -f db_secret.yaml

14- Configure db-pod to load environment variables from the newly created secret.
      Delete and recreate the pod if required.

kubectl create -f db_pod.yaml

kubectl exec -it db-pod -- sh

echo $MYSQL_USER               
user1

15- Create a multi-container pod with 2 containers.
Name: yellow
 Container 1 Name: lemon 
Container 1 Image: busybox
 Container 2 Name: gold 
Container 2 Image: redis

kubectl create -f multi_container_pod.yaml

16- Create a pod red with redis image and use an initContainer that uses the busybox image and sleeps for 20 seconds

kubectl create -f red_pod.yaml

17- Create a Persistent Volume with the given specification.
                    Volume Name: pv-log
    • Storage: 100Mi
    • Access Modes: ReadWriteMany
    • Host Path: /pv/log

kubectl create -f pv_log.yaml

18- Create a Persistent Volume Claim with the given specification.
    • Volume Name: claim-log-1
    • Storage Request: 50Mi
    • Access Modes: ReadWriteMany

kubectl create -f claim_log_1.yaml

19- Create a webapp pod to use the persistent volume claim as its storage.
                    Name: webapp
    • Image Name: nginx
    • Volume: PersistentVolumeClaim=claim-log-1
    • Volume Mount: /var/log/nginx

kubectl create -f webapp_pod.yaml

20- Create a pod named volume-share-datacenter.

For first container, use image centos:latest, container should be named as volume-container-datacenter-1, and run a command '/bin/bash', '-c' and 'sleep 10000'. Volume volume-share should be mounted at path /tmp/news.
For second container, use image centos:latest, container should be named as volume-container-datacenter-2, and run a command '/bin/bash', '-c' and 'sleep 10000'. Volume volume-share should be mounted at path /tmp/cluster.
Volumes to be named as volume-share and use emptyDir: { }.
After creating the pod, exec into the first container volume-container-datacenter-1, and create a file news.txt with content Welcome from datacenter-1! under the mount path of first container  /tmp/news.
The file news.txt should be present under the mounted path /tmp/cluster of second container volume-container-datacenter-2 as they are using shared volumes.

kubectl create -f volume_share_datacenter_pod.yaml

kubectl exec -it volume-share-datacenter -c volume-container-datacenter-1 sh
echo "Welcome from datacenter-1!" > /tmp/news/news.txt
exit
kubectl exec -it volume-share-datacenter -c volume-container-datacenter-2 sh
cat /tmp/cluster/news.txt
exit

21- Create a pod named webserver.

Create an emptyDir volume name: shared-logs.
Create two containers from nginx and ubuntu images with latest tag only and remember to mention tag i.e nginx:latest, nginx container name should be nginx-container and ubuntu container name should be sidecar-container on webserver pod.
Add command on sidecar-container "sh","-c","while true; do cat /var/log/nginx/access.log /var/log/nginx/error.log; sleep 30; done"
Mount volume /var/log/nginx on both containers, all containers should be up and running.

kubectl create -f webserver_pod.yaml

22- Create a new service account with the name pvviewer. Grant this Service account access to list all PersistentVolumes in the cluster by creating an appropriate cluster role called pvviewer-role and ClusterRoleBinding called pvviewer-role-binding.

kubectl create -f pvviewer_service_account.yaml
kubectl create -f pvviewer_cluster_role.yaml
kubectl create -f pvviewer_cluster_role_binding.yaml

23- Create a pod named print-envars-greeting.
    1. Configure spec as, the container name should be print-env-container and use bash image.
    2. Create three environment variables:
a. GREETING and its value should be Welcome to
b. COMPANY and its value should be DevOps
c. GROUP and its value should be Industries
    4. Use command to echo ["$(GREETING) $(COMPANY) $(GROUP)"] message.
    5. You can check the output using <kubctl logs -f [ pod-name ]> command.


kubectl create -f print_envars_greeting_pod.yaml

kubectl logs -f print-envars-greeting

Welcome To DevOps Industries